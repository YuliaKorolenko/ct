// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ads "homework10/internal/entities/ads"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// ChangeAdStatus provides a mock function with given fields: ad
func (_m *Repository) ChangeAdStatus(ad ads.Ad) (ads.Ad, error) {
	ret := _m.Called(ad)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(ads.Ad) (ads.Ad, error)); ok {
		return rf(ad)
	}
	if rf, ok := ret.Get(0).(func(ads.Ad) ads.Ad); ok {
		r0 = rf(ad)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(ads.Ad) error); ok {
		r1 = rf(ad)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAd provides a mock function with given fields: ad
func (_m *Repository) CreateAd(ad ads.Ad) (ads.Ad, error) {
	ret := _m.Called(ad)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(ads.Ad) (ads.Ad, error)); ok {
		return rf(ad)
	}
	if rf, ok := ret.Get(0).(func(ads.Ad) ads.Ad); ok {
		r0 = rf(ad)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(ads.Ad) error); ok {
		r1 = rf(ad)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAd provides a mock function with given fields: ad
func (_m *Repository) DeleteAd(ad ads.Ad) error {
	ret := _m.Called(ad)

	var r0 error
	if rf, ok := ret.Get(0).(func(ads.Ad) error); ok {
		r0 = rf(ad)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdsList provides a mock function with given fields: ad
func (_m *Repository) GetAdsList(ad ads.AdFilter) ([]ads.Ad, error) {
	ret := _m.Called(ad)

	var r0 []ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(ads.AdFilter) ([]ads.Ad, error)); ok {
		return rf(ad)
	}
	if rf, ok := ret.Get(0).(func(ads.AdFilter) []ads.Ad); ok {
		r0 = rf(ad)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(ads.AdFilter) error); ok {
		r1 = rf(ad)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdsListSlow provides a mock function with given fields: ad
func (_m *Repository) GetAdsListSlow(ad ads.AdFilter) ([]ads.Ad, error) {
	ret := _m.Called(ad)

	var r0 []ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(ads.AdFilter) ([]ads.Ad, error)); ok {
		return rf(ad)
	}
	if rf, ok := ret.Get(0).(func(ads.AdFilter) []ads.Ad); ok {
		r0 = rf(ad)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(ads.AdFilter) error); ok {
		r1 = rf(ad)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentAd provides a mock function with given fields: id
func (_m *Repository) GetCurrentAd(id int64) (ads.Ad, error) {
	ret := _m.Called(id)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (ads.Ad, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) ads.Ad); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAd provides a mock function with given fields: ad
func (_m *Repository) UpdateAd(ad ads.Ad) (ads.Ad, error) {
	ret := _m.Called(ad)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(ads.Ad) (ads.Ad, error)); ok {
		return rf(ad)
	}
	if rf, ok := ret.Get(0).(func(ads.Ad) ads.Ad); ok {
		r0 = rf(ad)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(ads.Ad) error); ok {
		r1 = rf(ad)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
